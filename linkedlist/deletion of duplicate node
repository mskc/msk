#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *next;
};
struct node *createnode()
{
	 return NULL;
}
void insert(struct node **head,int data)
{
	struct node *newnode=(struct node *)malloc(sizeof(struct node));
	struct node *temp,*p;
	newnode->data=data;
	newnode->next=NULL;
	if(!*head)
	{
	   *head=newnode;
	    return;
	}
	temp=*head;
	while(temp!=NULL)
	{
	    p=temp;
	    temp=temp->next;
	}
	p->next=newnode;
}
void print(struct node *head)
{
	struct node *temp;
	temp=head;
	while(temp!=NULL)
	{
		printf("\n%d",temp->data);
		temp=temp->next;
	}
}
void swap(struct node *t)
{
	int t1;
	t1=t->data;
	t->data=t->next->data;
	t->next->data=t1;
}
int size(struct node *head)
{
	struct node *temp;
	int count=0;
	temp=head;
	while(temp!=NULL)
	{
		count++;
		temp=temp->next;
	}
	return count;
}

void absolutesort(struct node *head)
{
	struct node *temp;
	temp=head;
	int i,j,f=0;
	for(i=0;i<size(head);i++)
	{
		temp=head;
		for(j=0;j<size(head)-1;j++)
		{
			if((temp->data)>(temp->next->data))
			{
			swap(temp);
			f=1;
			}
			temp=temp->next;
		}
		if(!f)
		break;
	}
}
void deleteduplicatenode(struct node **head)
{
	struct node *temp,*p;
	int t;
	temp=*head;
	while(temp!=NULL)
	{
       t=temp->data;
       p=temp;
       //printf("\nd");
       if(temp->next!=NULL&&t==temp->next->data)
        {
           while(p->next!=NULL&&p->next->data==t)
           p->next=p->next->next;
           temp=p->next;
           //printf("\nt");
        }
       else
	   {
	   	 //printf("\ny");
         temp=temp->next;
        }  
        //printf("\nu");
    }
}
int main()
{
	struct node *head=createnode();
	insert(&head,5);
	insert(&head,5);
	insert(&head,5);
	insert(&head,5);
	insert(&head,5);
	print(head);
	printf("\nsorted list is");
	absolutesort(head);
	print(head);
	printf("\nafter deleting duplicate node");
	deleteduplicatenode(&head);
	print(head); 
	return 0;
}
	
	
	

