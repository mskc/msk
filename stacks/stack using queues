#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct queue
 {
	int capacity,front,rear;
	int *array;
 };
struct stack
 {
	struct queue *q1,*q2;
 };
struct queue *createqueue(int size)
 {
	struct queue *q=(struct queue *)malloc(sizeof(struct queue));
	q->capacity=size;
	q->front=q->rear=-1;
	q->array=(int *)malloc(q->capacity*sizeof(int));
	return q;
 }
struct stack *createstack()
 {
	struct stack *s=(struct stack *)malloc(sizeof(struct stack));
	s->q1=createqueue(6);
	s->q2=createqueue(6);
	return s;
 }
int fullqueue(struct queue *q)
 { 
	return (q->rear+1)%q->capacity==q->capacity;
 }
int emptyqueue(struct queue *q)
 {
	return q->front==-1;
 }
void enqueue(struct queue *q,int data)
 {
	if(fullqueue(q))
	return;
	q->rear=(q->rear+1)%q->capacity;
	q->array[q->rear]=data;
	if(q->front==-1)
	q->front=q->rear;
	//printf("\n%d is entered",data);
 }
int dequeue(struct queue *q)
 {
	int p;
	if(emptyqueue(q))
	return INT_MIN;
	p=q->array[q->front];
	if(q->front==q->rear)
	q->rear=q->front=-1;
	else
	q->front=(q->front+1)%q->capacity;
	return p;
 }
int size(struct queue *q)
 {
   if(q->front==-1&&q->rear==-1)
   return 0;
	if(q->front<q->rear)
	return (q->capacity-(q->capacity-(q->rear-q->front))+1)%q->capacity;
	return (q->capacity-q->front+q->rear+1)%q->capacity;
 }
int front(struct queue *q)
 {
   if(emptyqueue(q))
   return INT_MIN; 
	return q->array[q->front];
 }
int rear(struct queue *q)
 {
	if(emptyqueue(q))
   return INT_MIN; 
 	return q->array[q->rear];
 }
void push(struct stack *s,int data)
{
	if(emptyqueue(s->q1))
	enqueue(s->q2,data);
	else
	enqueue(s->q1,data);
}
int pop(struct stack *s)
{
	int i,l;
	if(emptyqueue(s->q2))
	{
		l=size(s->q1);
		i=0;
		while(i<l-1)
		{
			enqueue(s->q2,dequeue(s->q1));
			i++;
		}
		return dequeue(s->q1);
	}
	else
	{
		l=size(s->q2);
		i=0;
		while(i<l-1)
		{
			enqueue(s->q1,dequeue(s->q2));
			i++;
		}
		return dequeue(s->q2);
	}
}
void peek(struct stack *s)
{
	print(s->q1);
	print(s->q2);
	return;
}
void print(struct queue *q)
{
	if(emptyqueue(q))
	{
	printf("\nempty\n");
	return;
	}
	else
	{
		int t=q->front;
		while(t!=q->rear)
		{
			printf("\n%d\n",q->array[t]);
			t=(t+1)%q->capacity;
		}
		printf("\n%d\n",q->array[t]);
		return;
	}
}
int main()
	{
		struct stack *q=createstack();
		push(q,4);
		push(q,7);
		push(q,9);
		push(q,14);
		push(q,76);
		printf("\nelemeents in queues q1 and q2 are");
		peek(q);
		printf("\n%d is popped",pop(q));
		printf("\n%d is popped",pop(q));
		printf("\n%d is popped",pop(q));
		printf("\nelemeents in queues q1 and q2 are");
		peek(q);
		return 0;
	}
	
	

	
		