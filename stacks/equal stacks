#include<stdio.h>
#include<stdlib.h>
struct stacknode{
	char data;
	struct stacknode* next;
};
struct mainstack{
	struct stacknode *s1,*s2,*s3;
};
struct stacknode* create()
{
	return NULL;
}
struct mainstack* createmainstack()
{
   struct mainstack* s=(struct mainstack*)malloc(sizeof(struct mainstack));
   s->s1=create();
   s->s2=create();
   s->s3=create();
}
int isempty(struct stacknode **s)
{
	return *s==NULL;
}
void push1(struct stacknode **s,int data)
{
	struct stacknode *newnode=(struct stacknode *)malloc(sizeof(struct stacknode));
	newnode->data=data;
	newnode->next=*s;
	*s=newnode;
}
void push(struct mainstack *s,int data,int a)
{
	if(a==1)
	push1(&s->s1,data);
	if(a==2)
	push1(&s->s2,data);
	if(a==3)
	push1(&s->s3,data);
}
int pop(struct stacknode **s)
{
	int temp;
	temp=(*s)->data;
	*s=(*s)->next;
	return temp;
}
int size(struct stacknode **s)
{
	struct stacknode *temp;
	temp=*s;
	int count=0;
	while(temp!=0)
	{
		count=count+temp->data;
		temp=temp->next;
	}
	return count;
}
int min(struct stacknode **s1,struct stacknode **s2,struct stacknode **s3)
{
	if(size(s1)<=size(s2)&&size(s1)<=size(s3))
	return size(s1);
	if(size(s2)<=size(s1)&&size(s2)<=size(s3))
	return size(s2);
	if(size(s3)<=size(s1)&&size(s3)<=size(s2))
	return size(s3);
	
}
void print1(struct stacknode **s)
{
	struct stacknode *temp=*s;
	while(temp!=NULL)
	{
		printf("\n%d",temp->data);
		temp=temp->next;
	}
}
void print(struct mainstack *s)
{
	printf("\n1st stack");
	print1(&s->s1);
	printf("\n2nd stack");
	print1(&s->s2);
	printf("\n3rd stack");
	print1(&s->s3);
}
int largestrectangle(struct mainstack *s)
{
	while(isempty(&s->s1)==0&&isempty(&s->s2)==0&&isempty(&s->s3)==0)
	{
	int m=min(&s->s1,&s->s2,&s->s3);
	while(m<size(&s->s1))
	pop(&s->s1);
	while(m<size(&s->s2))
	pop(&s->s2);
	while(m<size(&s->s3))
	pop(&s->s3);
    if(size(&s->s1)==size(&s->s2)&&size(&s->s1)==size(&s->s3))
    return size(&s->s1);
    }
}
int main()
{
	struct mainstack *s=createmainstack();
	push(s,1,1);
	push(s,2,1);
	push(s,4,1);
	push(s,1,2);
	push(s,1,2);
	push(s,1,2);
	push(s,2,3);
	push(s,0,3);
	push(s,1,3);
	printf("\nelements of");
	print(s);
	printf("\nmax possible height is");
	printf("\n%d",largestrectangle(s));
	return 0;
}
