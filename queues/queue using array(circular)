#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct queue
{
	int capacity,front,rear;
	int *array;
};
struct queue *createqueue(int size)
{
	struct queue *q=(struct queue *)malloc(sizeof(struct queue));
	q->capacity=size;
	q->front=q->rear=-1;
	q->array=(int *)malloc(q->capacity*sizeof(int));
	return q;
}
int fullqueue(struct queue *q)
{
	return (q->rear+1)%q->capacity==q->capacity;
}
int emptyqueue(struct queue *q)
{
	return q->front==-1;
}
void enqueue(struct queue *q,int data)
{
	if(fullqueue(q))
	return;
	q->rear=(q->rear+1)%q->capacity;
	q->array[q->rear]=data;
	if(q->front==-1)
	q->front=q->rear;
	printf("\n%d is entered",data);
}
int dequeue(struct queue *q)
{
	int p;
	if(emptyqueue(q))
	return INT_MIN;
	p=q->array[q->front];
	if(q->front==q->rear)
	q->rear=q->front=-1;
	else
	q->front=(q->front+1)%q->capacity;
	return p;
}
int size(struct queue *q)
{
	if(q->front<q->rear)
	return (q->capacity-(q->capacity-(q->rear-q->front))+1)%q->capacity;
	return (q->capacity-q->front+q->rear+1)%q->capacity;
	}
int front(struct queue *q)
{
	return q->array[q->front];
}
int rear(struct queue *q)
{
	
	return q->array[q->rear];
}
	int main()
	{
		struct queue *q=createqueue(6);
		enqueue(q,4);
		enqueue(q,6);
		enqueue(q,14);
		enqueue(q,7);
		enqueue(q,8);
		printf("\nsize of queue is %d",size(q));
		printf("\n%d is removed",dequeue(q));
		printf("\nsize of queue is %d",size(q));
		printf("\n%d is removed",dequeue(q));
		printf("\nfront element is %d",front(q));
		printf("\nrear element is %d",rear(q));
		return 0;
	}
	
	

	
		