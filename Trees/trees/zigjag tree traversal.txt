#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct treenode{
	int data;
	struct treenode *right,*left;
};
struct treenode* createtree()
{
	return NULL;
}
struct node
{
	struct treenode *data;
	struct node *next;
};
int isempty(struct node **s)
{
	if(*s==NULL)
	return 1;
	return 0;
}
void push(struct node **s,struct treenode* node)
{
	struct node *newnode=(struct node *)malloc(sizeof(struct node));
	newnode->data=node;
	newnode->next=*s;
	*s=newnode;
}
struct treenode* pop(struct node **s)
{
	struct treenode *temp;
	temp=(*s)->data;
	*s=(*s)->next;
	return temp;
}
struct treenode* node(int data)
{
	struct treenode *newnode=(struct treenode *)malloc(sizeof(struct treenode ));
	newnode->data=data;
	newnode->left=newnode->right=NULL;
	return newnode;
}
void swap(struct node **x,struct node **y)
{
	struct node *temp;
	temp=*x;
	*x=*y;
	*y=temp;
}
void zigjagprint(struct treenode *root)
{
	struct node *currentlevel,*nextlevel;
	currentlevel=nextlevel=NULL;
	struct treenode *temp;
	int lefttoright=1;
	if(root==NULL)
	return;
	push(&currentlevel,root);
	while(!isempty(&currentlevel))
	{
		temp=pop(&currentlevel);
		if(temp)
		{
			printf("%d",temp->data);
			if(lefttoright)
			{
				if(temp->left)
				push(&nextlevel,temp->left);
				if(temp->right)
				push(&nextlevel,temp->right);
			}
			else
			{
				if(temp->right)
				push(&nextlevel,temp->right);
				if(temp->left)
				push(&nextlevel,temp->left);
			}
		}
		if(isempty(&currentlevel))
		{
			lefttoright=1-lefttoright;
			swap(&currentlevel,&nextlevel);
		}
	}
}
int main()
{
	struct treenode *root,*t,*t1;
	root=createtree();
	root=node(1);
	root->left=node(2);
	root->right=node(3);
	t=root->left;
	t->left=node(4);
	t->right=node(5);
	t1=root->right;
	t1->left=node(6);
	t1->right=node(7);
	zigjagprint(root);
	return 0;
}
