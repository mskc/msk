#include<stdio.h>
#include<stdlib.h>
struct graph{
	int v;
	int e;
	int a[10][10];
};
struct node
{
	int data;
	struct node *next;
};
struct queue
{
		struct node *front,*rear;
 };
 struct queue *createqueue()
 {
	  struct queue *q=(struct queue*)malloc(sizeof(struct queue));
	  struct node *temp=(struct node *)malloc(sizeof(struct node));
	  if(!q)return NULL;
	  q->front=q->rear=NULL;
     return q;	  
 }
 int isemptyqueue(struct queue *q)
	 { 
	   return q->front==NULL;
	  }
void enqueue(struct queue *q,int data)
	{
		struct node *newnode=(struct node *)malloc(sizeof(struct node));
		if(!newnode)return;
		newnode->data=data;
		newnode->next=NULL;
		if(q->rear==NULL)
		{
		q->rear=q->front=newnode;
		return;
		}
		q->rear->next=newnode;
		q->rear=newnode;
	}
int dequeue(struct queue *q)
	{
		if(isemptyqueue(q))
		return INT_MIN;
		struct node *temp;
		temp=q->front;
		q->front=q->front->next;
		if(q->front==NULL)
		q->rear=NULL;
		return temp->data;
	}
struct graph* adjmatrix(int v,int e)
{
	struct graph *g=(struct graph*)malloc(sizeof(struct graph));
	g->v=v;
	g->e=e;
	int i,u,t;
	for(u=0;u<g->v;u++)
	for(t=0;t<g->v;t++)
	g->a[u][t]=0;
	for( i=0;i<g->e;i++)
	{
		printf("enter edges");
		scanf("%d %d",&u,&t);
		g->a[u][t]=1;
		g->a[t][u]=1;
	}
	return g;
}
void bfs(struct graph *g,int i,int *visited)
{
	int u;
	struct queue *q=createqueue();
	enqueue(q,i);
	visited[i]=1;
	while(!isemptyqueue(q))
	{
		i=dequeue(q);
		printf("\n%d",i);
		for(u=0;u<g->v;u++)
        {
		if(!visited[u]&&g->a[i][u])
		{
		visited[u]=1;
		enqueue(q,u);
	    }   
	}
	}
}
void bfstraversal(struct graph *g)
{
	int visited[g->v];
	for(int i=0;i<g->v;i++)
	visited[i]=0;
	bfs(g,0,visited);
	}
int main()
{
	struct graph *g=adjmatrix(8,8);
	bfstraversal(g);
	return 0;
}